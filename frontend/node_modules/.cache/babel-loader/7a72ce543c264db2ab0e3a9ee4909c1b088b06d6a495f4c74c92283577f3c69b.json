{"ast":null,"code":"import{useQuery,useMutation,useQueryClient}from'@tanstack/react-query';import{standingsApi}from'../services/api';// Query Keys\nexport const standingsQueryKeys={all:['standings'],lists:()=>[...standingsQueryKeys.all,'list'],list:filters=>[...standingsQueryKeys.lists(),filters],detail:id=>[...standingsQueryKeys.all,'detail',id],team:(teamId,year)=>[...standingsQueryKeys.all,'team',teamId,...(year?[year]:[])],conference:(conference,year)=>[...standingsQueryKeys.all,'conference',conference,year],ranked:(year,limit)=>[...standingsQueryKeys.all,'ranked',year,...(limit?[limit]:[])],votes:year=>[...standingsQueryKeys.all,'votes',year]};// Query Hooks\n/**\n * Hook for fetching standings with filtering and pagination\n */export const useStandings=params=>{return useQuery({queryKey:standingsQueryKeys.list(params||{}),queryFn:async()=>{const response=await standingsApi.getStandings(params);return response.data;},staleTime:5*60*1000,// 5 minutes\ngcTime:10*60*1000// 10 minutes\n});};/**\n * Hook for fetching a specific standing by ID\n */export const useStanding=id=>{return useQuery({queryKey:standingsQueryKeys.detail(id),queryFn:async()=>{const response=await standingsApi.getById(id);return response.data;},enabled:!!id,staleTime:5*60*1000,gcTime:10*60*1000});};/**\n * Hook for fetching team-specific standings\n */export const useTeamStanding=(teamId,year)=>{return useQuery({queryKey:standingsQueryKeys.team(teamId,year),queryFn:async()=>{const response=await standingsApi.getTeamStanding(teamId,year);return response.data;},enabled:!!teamId,staleTime:5*60*1000,gcTime:10*60*1000});};/**\n * Hook for fetching conference standings\n */export const useConferenceStandings=(conference,year)=>{return useQuery({queryKey:standingsQueryKeys.conference(conference,year),queryFn:async()=>{const response=await standingsApi.getByConference(conference,year);return response.data;},enabled:!!conference&&!!year,staleTime:5*60*1000,gcTime:10*60*1000});};/**\n * Hook for fetching ranked teams\n */export const useRankedStandings=(year,limit)=>{return useQuery({queryKey:standingsQueryKeys.ranked(year,limit),queryFn:async()=>{const response=await standingsApi.getRanked(year,limit);return response.data;},enabled:!!year,staleTime:5*60*1000,gcTime:10*60*1000});};/**\n * Hook for fetching teams receiving votes\n */export const useReceivingVotesStandings=year=>{return useQuery({queryKey:standingsQueryKeys.votes(year),queryFn:async()=>{const response=await standingsApi.getReceivingVotes(year);return response.data;},enabled:!!year,staleTime:5*60*1000,gcTime:10*60*1000});};// Mutation Hooks\n/**\n * Hook for creating a new standing\n */export const useCreateStanding=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:async data=>{const response=await standingsApi.create(data);return response.data;},onSuccess:newStanding=>{var _newStanding$team,_newStanding$team2;// Invalidate and refetch standings queries\nqueryClient.invalidateQueries({queryKey:standingsQueryKeys.all});// Optimistically update team-specific queries\nif(newStanding!==null&&newStanding!==void 0&&(_newStanding$team=newStanding.team)!==null&&_newStanding$team!==void 0&&_newStanding$team.id){queryClient.invalidateQueries({queryKey:standingsQueryKeys.team(newStanding.team.id)});}// Invalidate conference standings\nif(newStanding!==null&&newStanding!==void 0&&(_newStanding$team2=newStanding.team)!==null&&_newStanding$team2!==void 0&&_newStanding$team2.conference&&newStanding!==null&&newStanding!==void 0&&newStanding.year){queryClient.invalidateQueries({queryKey:standingsQueryKeys.conference(newStanding.team.conference,newStanding.year)});}},onError:error=>{console.error('Failed to create standing:',error);}});};/**\n * Hook for updating an existing standing\n */export const useUpdateStanding=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:async _ref=>{let{id,data}=_ref;const response=await standingsApi.update(id,data);return response.data;},onSuccess:(updatedStanding,_ref2)=>{var _updatedStanding$team,_updatedStanding$team2;let{id}=_ref2;// Update the specific standing in cache\nqueryClient.setQueryData(standingsQueryKeys.detail(id),updatedStanding);// Invalidate related queries\nqueryClient.invalidateQueries({queryKey:standingsQueryKeys.lists()});if(updatedStanding!==null&&updatedStanding!==void 0&&(_updatedStanding$team=updatedStanding.team)!==null&&_updatedStanding$team!==void 0&&_updatedStanding$team.id){queryClient.invalidateQueries({queryKey:standingsQueryKeys.team(updatedStanding.team.id)});}if(updatedStanding!==null&&updatedStanding!==void 0&&(_updatedStanding$team2=updatedStanding.team)!==null&&_updatedStanding$team2!==void 0&&_updatedStanding$team2.conference&&updatedStanding!==null&&updatedStanding!==void 0&&updatedStanding.year){queryClient.invalidateQueries({queryKey:standingsQueryKeys.conference(updatedStanding.team.conference,updatedStanding.year)});}},onError:error=>{console.error('Failed to update standing:',error);}});};/**\n * Hook for deleting a standing\n */export const useDeleteStanding=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:async id=>{await standingsApi.delete(id);return id;},onSuccess:deletedId=>{// Remove from cache and invalidate queries\nqueryClient.removeQueries({queryKey:standingsQueryKeys.detail(deletedId)});queryClient.invalidateQueries({queryKey:standingsQueryKeys.all});},onError:error=>{console.error('Failed to delete standing:',error);}});};/**\n * Hook for calculating standings for a year\n */export const useCalculateStandings=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:async year=>{const response=await standingsApi.calculateStandings(year);return response.data;},onSuccess:(_,year)=>{// Invalidate all standings queries for the calculated year\nqueryClient.invalidateQueries({queryKey:standingsQueryKeys.all,predicate:query=>{const key=query.queryKey;return key.includes(year)||key.includes('list');}});},onError:error=>{console.error('Failed to calculate standings:',error);}});};/**\n * Hook for calculating conference standings\n */export const useCalculateConferenceStandings=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:async _ref3=>{let{conference,year}=_ref3;const response=await standingsApi.calculateConferenceStandings(conference,year);return response.data;},onSuccess:(_,_ref4)=>{let{conference,year}=_ref4;// Invalidate specific conference standings\nqueryClient.invalidateQueries({queryKey:standingsQueryKeys.conference(conference,year)});// Invalidate general standings queries that might include this conference\nqueryClient.invalidateQueries({queryKey:standingsQueryKeys.lists()});},onError:error=>{console.error('Failed to calculate conference standings:',error);}});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
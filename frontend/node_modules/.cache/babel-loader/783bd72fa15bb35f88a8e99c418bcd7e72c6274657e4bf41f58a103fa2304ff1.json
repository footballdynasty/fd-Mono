{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$(),\n  _s0 = $RefreshSig$(),\n  _s1 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { gameApi, weekApi } from '../services/api';\n// Query Keys\nexport const scheduleQueryKeys = {\n  all: ['schedule'],\n  games: () => [...scheduleQueryKeys.all, 'games'],\n  gamesList: filters => [...scheduleQueryKeys.games(), 'list', filters],\n  gamesByWeek: weekId => [...scheduleQueryKeys.games(), 'week', weekId],\n  gamesByTeam: (teamId, year) => [...scheduleQueryKeys.games(), 'team', teamId, ...(year ? [year] : [])],\n  upcomingGames: teamId => [...scheduleQueryKeys.games(), 'upcoming', ...(teamId ? [teamId] : [])],\n  recentGames: (teamId, limit) => [...scheduleQueryKeys.games(), 'recent', ...(teamId ? [teamId] : []), ...(limit ? [limit] : [])],\n  weeks: () => [...scheduleQueryKeys.all, 'weeks'],\n  currentWeek: () => [...scheduleQueryKeys.weeks(), 'current'],\n  weeksByYear: year => [...scheduleQueryKeys.weeks(), 'year', year],\n  specificWeek: (year, weekNumber) => [...scheduleQueryKeys.weeks(), 'specific', year, weekNumber]\n};\n\n// Game Query Hooks\n\n/**\n * Hook for fetching games with filtering and pagination\n */\nexport const useGames = params => {\n  _s();\n  return useQuery({\n    queryKey: scheduleQueryKeys.gamesList(params || {}),\n    queryFn: async () => {\n      const response = await gameApi.getAll(params);\n      return response.data;\n    },\n    staleTime: 2 * 60 * 1000,\n    // 2 minutes (shorter for live games)\n    gcTime: 5 * 60 * 1000 // 5 minutes\n  });\n};\n\n/**\n * Hook for fetching games by week\n */\n_s(useGames, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useGamesByWeek = weekId => {\n  _s2();\n  return useQuery({\n    queryKey: scheduleQueryKeys.gamesByWeek(weekId),\n    queryFn: async () => {\n      const response = await gameApi.getByWeek(weekId);\n      return response.data;\n    },\n    enabled: !!weekId,\n    staleTime: 2 * 60 * 1000,\n    // 2 minutes\n    gcTime: 5 * 60 * 1000,\n    refetchInterval: 30 * 1000 // 30 seconds - refetch for live updates\n  });\n};\n\n/**\n * Hook for fetching games by team\n */\n_s2(useGamesByWeek, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useGamesByTeam = (teamId, year) => {\n  _s3();\n  return useQuery({\n    queryKey: scheduleQueryKeys.gamesByTeam(teamId, year),\n    queryFn: async () => {\n      const response = await gameApi.getByTeam(teamId, year);\n      return response.data;\n    },\n    enabled: !!teamId,\n    staleTime: 5 * 60 * 1000,\n    // 5 minutes\n    gcTime: 10 * 60 * 1000\n  });\n};\n\n/**\n * Hook for fetching upcoming games\n */\n_s3(useGamesByTeam, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useUpcomingGames = teamId => {\n  _s4();\n  return useQuery({\n    queryKey: scheduleQueryKeys.upcomingGames(teamId),\n    queryFn: async () => {\n      const response = await gameApi.getUpcoming(teamId);\n      return response.data;\n    },\n    staleTime: 5 * 60 * 1000,\n    // 5 minutes\n    gcTime: 10 * 60 * 1000\n  });\n};\n\n/**\n * Hook for fetching recent games\n */\n_s4(useUpcomingGames, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useRecentGames = (teamId, limit) => {\n  _s5();\n  return useQuery({\n    queryKey: scheduleQueryKeys.recentGames(teamId, limit),\n    queryFn: async () => {\n      const response = await gameApi.getRecent(teamId, limit);\n      return response.data;\n    },\n    staleTime: 5 * 60 * 1000,\n    // 5 minutes\n    gcTime: 10 * 60 * 1000\n  });\n};\n\n// Week Query Hooks\n\n/**\n * Hook for fetching current week information\n */\n_s5(useRecentGames, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCurrentWeek = () => {\n  _s6();\n  return useQuery({\n    queryKey: scheduleQueryKeys.currentWeek(),\n    queryFn: async () => {\n      const response = await weekApi.getCurrent();\n      return response.data;\n    },\n    staleTime: 30 * 60 * 1000,\n    // 30 minutes (weeks don't change often)\n    gcTime: 60 * 60 * 1000 // 1 hour\n  });\n};\n\n/**\n * Hook for fetching all weeks for a year\n */\n_s6(useCurrentWeek, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useWeeksByYear = year => {\n  _s7();\n  return useQuery({\n    queryKey: scheduleQueryKeys.weeksByYear(year),\n    queryFn: async () => {\n      const response = await weekApi.getByYear(year);\n      return response.data;\n    },\n    enabled: !!year,\n    staleTime: 60 * 60 * 1000,\n    // 1 hour\n    gcTime: 2 * 60 * 60 * 1000 // 2 hours\n  });\n};\n\n/**\n * Hook for fetching a specific week\n */\n_s7(useWeeksByYear, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useSpecificWeek = (year, weekNumber) => {\n  _s8();\n  return useQuery({\n    queryKey: scheduleQueryKeys.specificWeek(year, weekNumber),\n    queryFn: async () => {\n      const response = await weekApi.getWeek(year, weekNumber);\n      return response.data;\n    },\n    enabled: !!year && !!weekNumber,\n    staleTime: 30 * 60 * 1000,\n    // 30 minutes\n    gcTime: 60 * 60 * 1000 // 1 hour\n  });\n};\n\n// Combined Hooks for Schedule Page\n\n/**\n * Hook for schedule page data - combines week info and games\n */\n_s8(useSpecificWeek, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useScheduleData = params => {\n  _s9();\n  const {\n    year,\n    weekNumber,\n    teamId,\n    teamView\n  } = params;\n\n  // Get current week if no specific week is provided\n  const {\n    data: currentWeekData\n  } = useCurrentWeek();\n  const {\n    data: weeksData\n  } = useWeeksByYear(year);\n\n  // Determine the effective weekId based on weekNumber or current week\n  const effectiveWeekId = (() => {\n    if (weekNumber && weeksData !== null && weeksData !== void 0 && weeksData.weeks) {\n      // Find the weekId for the specified week number\n      const weekInfo = weeksData.weeks.find(w => w.weekNumber === weekNumber);\n      return weekInfo === null || weekInfo === void 0 ? void 0 : weekInfo.id;\n    }\n    // Use current week by default\n    return currentWeekData === null || currentWeekData === void 0 ? void 0 : currentWeekData.weekId;\n  })();\n\n  // Call all hooks unconditionally (Rules of Hooks requirement)\n  const teamGamesQuery = useGamesByTeam(teamId || '', year);\n  const weekGamesQuery = useGamesByWeek(effectiveWeekId || '');\n  const allGamesQuery = useGames({\n    year,\n    size: 100\n  });\n\n  // Select the appropriate query based on view type and apply additional filtering\n  let selectedQuery;\n  let filteredData;\n  if (teamView === 'selected' && teamId) {\n    // For team view, start with team games but filter by week if specified\n    selectedQuery = teamGamesQuery;\n    filteredData = selectedQuery.data;\n\n    // If a specific week is selected, filter team games to only that week\n    if (weekNumber && filteredData) {\n      const games = Array.isArray(filteredData) ? filteredData : filteredData.content;\n      if (Array.isArray(games)) {\n        filteredData = games.filter(game => game.weekNumber === weekNumber);\n      }\n    }\n  } else if (effectiveWeekId) {\n    selectedQuery = weekGamesQuery;\n    filteredData = selectedQuery.data;\n  } else {\n    selectedQuery = allGamesQuery;\n    filteredData = selectedQuery.data;\n  }\n\n  // Debug logging\n  if (process.env.NODE_ENV === 'development') {\n    const getDataLength = data => {\n      if (!data) return 0;\n      if (Array.isArray(data)) return data.length;\n      if (data.content && Array.isArray(data.content)) return data.content.length;\n      return 0;\n    };\n    console.log('Schedule Data Debug:', {\n      teamView,\n      teamId,\n      weekNumber,\n      effectiveWeekId,\n      hasCurrentWeek: !!currentWeekData,\n      hasWeeksData: !!weeksData,\n      originalDataLength: getDataLength(selectedQuery.data),\n      filteredDataLength: getDataLength(filteredData),\n      queryType: teamView === 'selected' && teamId ? 'team' : effectiveWeekId ? 'week' : 'all'\n    });\n  }\n\n  // Extract games data - handle both Game[] and PaginatedResponse<Game>\n  const extractGames = data => {\n    if (!data) return undefined;\n    if (Array.isArray(data)) return data;\n    if (data.content && Array.isArray(data.content)) return data.content;\n    return undefined;\n  };\n  return {\n    data: extractGames(filteredData),\n    isLoading: selectedQuery.isLoading,\n    error: selectedQuery.error,\n    currentWeek: currentWeekData,\n    effectiveWeekId\n  };\n};\n\n/**\n * Hook for week navigation\n */\n_s9(useScheduleData, \"Z2N81cionUWTgFrPfxKdjKqY8rY=\", false, function () {\n  return [useCurrentWeek, useWeeksByYear, useGamesByTeam, useGamesByWeek, useGames];\n});\nexport const useWeekNavigation = year => {\n  _s0();\n  const {\n    data: currentWeekData\n  } = useCurrentWeek();\n  const {\n    data: weeksData\n  } = useWeeksByYear(year);\n  const currentWeekNumber = (currentWeekData === null || currentWeekData === void 0 ? void 0 : currentWeekData.currentWeek) || 1;\n  const totalWeeks = (currentWeekData === null || currentWeekData === void 0 ? void 0 : currentWeekData.totalWeeks) || (weeksData === null || weeksData === void 0 ? void 0 : weeksData.totalWeeks) || 15;\n  const navigationHelpers = {\n    canGoPrevious: currentWeekNumber > 1,\n    canGoNext: currentWeekNumber < totalWeeks,\n    getCurrentWeekId: () => currentWeekData === null || currentWeekData === void 0 ? void 0 : currentWeekData.weekId,\n    getWeekOptions: () => {\n      if (!(weeksData !== null && weeksData !== void 0 && weeksData.weeks)) return [];\n      return weeksData.weeks.map(week => ({\n        label: `Week ${week.weekNumber}`,\n        value: week.id,\n        weekNumber: week.weekNumber,\n        isCurrentWeek: week.weekNumber === currentWeekNumber\n      }));\n    }\n  };\n  return {\n    currentWeekNumber,\n    totalWeeks,\n    currentWeekData,\n    weeksData,\n    ...navigationHelpers,\n    isLoading: !currentWeekData || !weeksData\n  };\n};\n\n// Mutation Hooks\n\n/**\n * Hook for updating game scores\n */\n_s0(useWeekNavigation, \"qFz0E+Hd27MQNNqIwIglmWSF8JU=\", false, function () {\n  return [useCurrentWeek, useWeeksByYear];\n});\nexport const useUpdateGameScore = () => {\n  _s1();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      gameId,\n      homeScore,\n      awayScore\n    }) => {\n      const response = await gameApi.updateScore(gameId, homeScore, awayScore);\n      return response.data;\n    },\n    onSuccess: updatedGame => {\n      // Invalidate related queries\n      queryClient.invalidateQueries({\n        queryKey: scheduleQueryKeys.games()\n      });\n\n      // If the game has team info, invalidate team-specific queries\n      if (updatedGame.homeTeamId) {\n        queryClient.invalidateQueries({\n          queryKey: scheduleQueryKeys.gamesByTeam(updatedGame.homeTeamId)\n        });\n      }\n      if (updatedGame.awayTeamId) {\n        queryClient.invalidateQueries({\n          queryKey: scheduleQueryKeys.gamesByTeam(updatedGame.awayTeamId)\n        });\n      }\n\n      // Invalidate week-specific queries\n      if (updatedGame.weekId) {\n        queryClient.invalidateQueries({\n          queryKey: scheduleQueryKeys.gamesByWeek(updatedGame.weekId)\n        });\n      }\n    },\n    onError: error => {\n      console.error('Failed to update game score:', error);\n    }\n  });\n};\n_s1(useUpdateGameScore, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","gameApi","weekApi","scheduleQueryKeys","all","games","gamesList","filters","gamesByWeek","weekId","gamesByTeam","teamId","year","upcomingGames","recentGames","limit","weeks","currentWeek","weeksByYear","specificWeek","weekNumber","useGames","params","_s","queryKey","queryFn","response","getAll","data","staleTime","gcTime","useGamesByWeek","_s2","getByWeek","enabled","refetchInterval","useGamesByTeam","_s3","getByTeam","useUpcomingGames","_s4","getUpcoming","useRecentGames","_s5","getRecent","useCurrentWeek","_s6","getCurrent","useWeeksByYear","_s7","getByYear","useSpecificWeek","_s8","getWeek","useScheduleData","_s9","teamView","currentWeekData","weeksData","effectiveWeekId","weekInfo","find","w","id","teamGamesQuery","weekGamesQuery","allGamesQuery","size","selectedQuery","filteredData","Array","isArray","content","filter","game","process","env","NODE_ENV","getDataLength","length","console","log","hasCurrentWeek","hasWeeksData","originalDataLength","filteredDataLength","queryType","extractGames","undefined","isLoading","error","useWeekNavigation","_s0","currentWeekNumber","totalWeeks","navigationHelpers","canGoPrevious","canGoNext","getCurrentWeekId","getWeekOptions","map","week","label","value","isCurrentWeek","useUpdateGameScore","_s1","queryClient","mutationFn","gameId","homeScore","awayScore","updateScore","onSuccess","updatedGame","invalidateQueries","homeTeamId","awayTeamId","onError"],"sources":["/Users/brodycritchlow/Projects/footballdynasty-new/frontend/src/hooks/useSchedule.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { gameApi, weekApi } from '../services/api';\nimport type { Game } from '../types';\n\n// Query Keys\nexport const scheduleQueryKeys = {\n  all: ['schedule'] as const,\n  games: () => [...scheduleQueryKeys.all, 'games'] as const,\n  gamesList: (filters: { page?: number; size?: number; year?: number }) => \n    [...scheduleQueryKeys.games(), 'list', filters] as const,\n  gamesByWeek: (weekId: string) => \n    [...scheduleQueryKeys.games(), 'week', weekId] as const,\n  gamesByTeam: (teamId: string, year?: number) => \n    [...scheduleQueryKeys.games(), 'team', teamId, ...(year ? [year] : [])] as const,\n  upcomingGames: (teamId?: string) => \n    [...scheduleQueryKeys.games(), 'upcoming', ...(teamId ? [teamId] : [])] as const,\n  recentGames: (teamId?: string, limit?: number) => \n    [...scheduleQueryKeys.games(), 'recent', ...(teamId ? [teamId] : []), ...(limit ? [limit] : [])] as const,\n  \n  weeks: () => [...scheduleQueryKeys.all, 'weeks'] as const,\n  currentWeek: () => [...scheduleQueryKeys.weeks(), 'current'] as const,\n  weeksByYear: (year: number) => [...scheduleQueryKeys.weeks(), 'year', year] as const,\n  specificWeek: (year: number, weekNumber: number) => \n    [...scheduleQueryKeys.weeks(), 'specific', year, weekNumber] as const,\n};\n\n// Game Query Hooks\n\n/**\n * Hook for fetching games with filtering and pagination\n */\nexport const useGames = (params?: { \n  page?: number; \n  size?: number; \n  year?: number \n}) => {\n  return useQuery({\n    queryKey: scheduleQueryKeys.gamesList(params || {}),\n    queryFn: async () => {\n      const response = await gameApi.getAll(params);\n      return response.data;\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes (shorter for live games)\n    gcTime: 5 * 60 * 1000, // 5 minutes\n  });\n};\n\n/**\n * Hook for fetching games by week\n */\nexport const useGamesByWeek = (weekId: string) => {\n  return useQuery({\n    queryKey: scheduleQueryKeys.gamesByWeek(weekId),\n    queryFn: async () => {\n      const response = await gameApi.getByWeek(weekId);\n      return response.data;\n    },\n    enabled: !!weekId,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n    gcTime: 5 * 60 * 1000,\n    refetchInterval: 30 * 1000, // 30 seconds - refetch for live updates\n  });\n};\n\n/**\n * Hook for fetching games by team\n */\nexport const useGamesByTeam = (teamId: string, year?: number) => {\n  return useQuery({\n    queryKey: scheduleQueryKeys.gamesByTeam(teamId, year),\n    queryFn: async () => {\n      const response = await gameApi.getByTeam(teamId, year);\n      return response.data;\n    },\n    enabled: !!teamId,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000,\n  });\n};\n\n/**\n * Hook for fetching upcoming games\n */\nexport const useUpcomingGames = (teamId?: string) => {\n  return useQuery({\n    queryKey: scheduleQueryKeys.upcomingGames(teamId),\n    queryFn: async () => {\n      const response = await gameApi.getUpcoming(teamId);\n      return response.data;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000,\n  });\n};\n\n/**\n * Hook for fetching recent games\n */\nexport const useRecentGames = (teamId?: string, limit?: number) => {\n  return useQuery({\n    queryKey: scheduleQueryKeys.recentGames(teamId, limit),\n    queryFn: async () => {\n      const response = await gameApi.getRecent(teamId, limit);\n      return response.data;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000,\n  });\n};\n\n// Week Query Hooks\n\n/**\n * Hook for fetching current week information\n */\nexport const useCurrentWeek = () => {\n  return useQuery({\n    queryKey: scheduleQueryKeys.currentWeek(),\n    queryFn: async () => {\n      const response = await weekApi.getCurrent();\n      return response.data;\n    },\n    staleTime: 30 * 60 * 1000, // 30 minutes (weeks don't change often)\n    gcTime: 60 * 60 * 1000, // 1 hour\n  });\n};\n\n/**\n * Hook for fetching all weeks for a year\n */\nexport const useWeeksByYear = (year: number) => {\n  return useQuery({\n    queryKey: scheduleQueryKeys.weeksByYear(year),\n    queryFn: async () => {\n      const response = await weekApi.getByYear(year);\n      return response.data;\n    },\n    enabled: !!year,\n    staleTime: 60 * 60 * 1000, // 1 hour\n    gcTime: 2 * 60 * 60 * 1000, // 2 hours\n  });\n};\n\n/**\n * Hook for fetching a specific week\n */\nexport const useSpecificWeek = (year: number, weekNumber: number) => {\n  return useQuery({\n    queryKey: scheduleQueryKeys.specificWeek(year, weekNumber),\n    queryFn: async () => {\n      const response = await weekApi.getWeek(year, weekNumber);\n      return response.data;\n    },\n    enabled: !!year && !!weekNumber,\n    staleTime: 30 * 60 * 1000, // 30 minutes\n    gcTime: 60 * 60 * 1000, // 1 hour\n  });\n};\n\n// Combined Hooks for Schedule Page\n\n/**\n * Hook for schedule page data - combines week info and games\n */\nexport const useScheduleData = (params: {\n  year: number;\n  weekNumber?: number | null;\n  teamId?: string;\n  teamView: 'all' | 'selected';\n}) => {\n  const { year, weekNumber, teamId, teamView } = params;\n  \n  // Get current week if no specific week is provided\n  const { data: currentWeekData } = useCurrentWeek();\n  const { data: weeksData } = useWeeksByYear(year);\n  \n  // Determine the effective weekId based on weekNumber or current week\n  const effectiveWeekId = (() => {\n    if (weekNumber && weeksData?.weeks) {\n      // Find the weekId for the specified week number\n      const weekInfo = weeksData.weeks.find((w: any) => w.weekNumber === weekNumber);\n      return weekInfo?.id;\n    }\n    // Use current week by default\n    return currentWeekData?.weekId;\n  })();\n  \n  // Call all hooks unconditionally (Rules of Hooks requirement)\n  const teamGamesQuery = useGamesByTeam(teamId || '', year);\n  const weekGamesQuery = useGamesByWeek(effectiveWeekId || '');\n  const allGamesQuery = useGames({ year, size: 100 });\n  \n  // Select the appropriate query based on view type and apply additional filtering\n  let selectedQuery;\n  let filteredData;\n  \n  if (teamView === 'selected' && teamId) {\n    // For team view, start with team games but filter by week if specified\n    selectedQuery = teamGamesQuery;\n    filteredData = selectedQuery.data;\n    \n    // If a specific week is selected, filter team games to only that week\n    if (weekNumber && filteredData) {\n      const games = Array.isArray(filteredData) ? filteredData : (filteredData as any).content;\n      if (Array.isArray(games)) {\n        filteredData = games.filter((game: any) => game.weekNumber === weekNumber);\n      }\n    }\n  } else if (effectiveWeekId) {\n    selectedQuery = weekGamesQuery;\n    filteredData = selectedQuery.data;\n  } else {\n    selectedQuery = allGamesQuery;\n    filteredData = selectedQuery.data;\n  }\n  \n  // Debug logging\n  if (process.env.NODE_ENV === 'development') {\n    const getDataLength = (data: any) => {\n      if (!data) return 0;\n      if (Array.isArray(data)) return data.length;\n      if (data.content && Array.isArray(data.content)) return data.content.length;\n      return 0;\n    };\n\n    console.log('Schedule Data Debug:', {\n      teamView,\n      teamId,\n      weekNumber,\n      effectiveWeekId,\n      hasCurrentWeek: !!currentWeekData,\n      hasWeeksData: !!weeksData,\n      originalDataLength: getDataLength(selectedQuery.data),\n      filteredDataLength: getDataLength(filteredData),\n      queryType: teamView === 'selected' && teamId ? 'team' : effectiveWeekId ? 'week' : 'all'\n    });\n  }\n\n  // Extract games data - handle both Game[] and PaginatedResponse<Game>\n  const extractGames = (data: any): Game[] | undefined => {\n    if (!data) return undefined;\n    if (Array.isArray(data)) return data;\n    if (data.content && Array.isArray(data.content)) return data.content;\n    return undefined;\n  };\n\n  return {\n    data: extractGames(filteredData),\n    isLoading: selectedQuery.isLoading,\n    error: selectedQuery.error,\n    currentWeek: currentWeekData,\n    effectiveWeekId,\n  };\n};\n\n/**\n * Hook for week navigation\n */\nexport const useWeekNavigation = (year: number) => {\n  const { data: currentWeekData } = useCurrentWeek();\n  const { data: weeksData } = useWeeksByYear(year);\n  \n  const currentWeekNumber = currentWeekData?.currentWeek || 1;\n  const totalWeeks = currentWeekData?.totalWeeks || weeksData?.totalWeeks || 15;\n  \n  const navigationHelpers = {\n    canGoPrevious: currentWeekNumber > 1,\n    canGoNext: currentWeekNumber < totalWeeks,\n    getCurrentWeekId: () => currentWeekData?.weekId,\n    getWeekOptions: () => {\n      if (!weeksData?.weeks) return [];\n      return weeksData.weeks.map((week: any) => ({\n        label: `Week ${week.weekNumber}`,\n        value: week.id,\n        weekNumber: week.weekNumber,\n        isCurrentWeek: week.weekNumber === currentWeekNumber,\n      }));\n    },\n  };\n  \n  return {\n    currentWeekNumber,\n    totalWeeks,\n    currentWeekData,\n    weeksData,\n    ...navigationHelpers,\n    isLoading: !currentWeekData || !weeksData,\n  };\n};\n\n// Mutation Hooks\n\n/**\n * Hook for updating game scores\n */\nexport const useUpdateGameScore = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ \n      gameId, \n      homeScore, \n      awayScore \n    }: { \n      gameId: string; \n      homeScore: number; \n      awayScore: number; \n    }) => {\n      const response = await gameApi.updateScore(gameId, homeScore, awayScore);\n      return response.data;\n    },\n    onSuccess: (updatedGame) => {\n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: scheduleQueryKeys.games() });\n      \n      // If the game has team info, invalidate team-specific queries\n      if (updatedGame.homeTeamId) {\n        queryClient.invalidateQueries({ \n          queryKey: scheduleQueryKeys.gamesByTeam(updatedGame.homeTeamId) \n        });\n      }\n      if (updatedGame.awayTeamId) {\n        queryClient.invalidateQueries({ \n          queryKey: scheduleQueryKeys.gamesByTeam(updatedGame.awayTeamId) \n        });\n      }\n      \n      // Invalidate week-specific queries\n      if (updatedGame.weekId) {\n        queryClient.invalidateQueries({ \n          queryKey: scheduleQueryKeys.gamesByWeek(updatedGame.weekId) \n        });\n      }\n    },\n    onError: (error) => {\n      console.error('Failed to update game score:', error);\n    },\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
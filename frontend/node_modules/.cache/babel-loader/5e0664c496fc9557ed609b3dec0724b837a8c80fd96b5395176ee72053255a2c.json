{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$(),\n  _s0 = $RefreshSig$(),\n  _s1 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { standingsApi } from '../services/api';\n// Query Keys\nexport const standingsQueryKeys = {\n  all: ['standings'],\n  lists: () => [...standingsQueryKeys.all, 'list'],\n  list: filters => [...standingsQueryKeys.lists(), filters],\n  detail: id => [...standingsQueryKeys.all, 'detail', id],\n  team: (teamId, year) => [...standingsQueryKeys.all, 'team', teamId, ...(year ? [year] : [])],\n  conference: (conference, year) => [...standingsQueryKeys.all, 'conference', conference, year],\n  ranked: (year, limit) => [...standingsQueryKeys.all, 'ranked', year, ...(limit ? [limit] : [])],\n  votes: year => [...standingsQueryKeys.all, 'votes', year]\n};\n\n// Query Hooks\n\n/**\n * Hook for fetching standings with filtering and pagination\n */\nexport const useStandings = params => {\n  _s();\n  return useQuery({\n    queryKey: standingsQueryKeys.list(params || {}),\n    queryFn: async () => {\n      const response = await standingsApi.getStandings(params);\n      return response.data;\n    },\n    staleTime: 5 * 60 * 1000,\n    // 5 minutes\n    gcTime: 10 * 60 * 1000 // 10 minutes\n  });\n};\n\n/**\n * Hook for fetching a specific standing by ID\n */\n_s(useStandings, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useStanding = id => {\n  _s2();\n  return useQuery({\n    queryKey: standingsQueryKeys.detail(id),\n    queryFn: async () => {\n      const response = await standingsApi.getById(id);\n      return response.data;\n    },\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000\n  });\n};\n\n/**\n * Hook for fetching team-specific standings\n */\n_s2(useStanding, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useTeamStanding = (teamId, year) => {\n  _s3();\n  return useQuery({\n    queryKey: standingsQueryKeys.team(teamId, year),\n    queryFn: async () => {\n      const response = await standingsApi.getTeamStanding(teamId, year);\n      return response.data;\n    },\n    enabled: !!teamId,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000\n  });\n};\n\n/**\n * Hook for fetching conference standings\n */\n_s3(useTeamStanding, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useConferenceStandings = (conference, year) => {\n  _s4();\n  return useQuery({\n    queryKey: standingsQueryKeys.conference(conference, year),\n    queryFn: async () => {\n      const response = await standingsApi.getByConference(conference, year);\n      return response.data;\n    },\n    enabled: !!conference && !!year,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000\n  });\n};\n\n/**\n * Hook for fetching ranked teams\n */\n_s4(useConferenceStandings, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useRankedStandings = (year, limit) => {\n  _s5();\n  return useQuery({\n    queryKey: standingsQueryKeys.ranked(year, limit),\n    queryFn: async () => {\n      const response = await standingsApi.getRanked(year, limit);\n      return response.data;\n    },\n    enabled: !!year,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000\n  });\n};\n\n/**\n * Hook for fetching teams receiving votes\n */\n_s5(useRankedStandings, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useReceivingVotesStandings = year => {\n  _s6();\n  return useQuery({\n    queryKey: standingsQueryKeys.votes(year),\n    queryFn: async () => {\n      const response = await standingsApi.getReceivingVotes(year);\n      return response.data;\n    },\n    enabled: !!year,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000\n  });\n};\n\n// Mutation Hooks\n\n/**\n * Hook for creating a new standing\n */\n_s6(useReceivingVotesStandings, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCreateStanding = () => {\n  _s7();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async data => {\n      const response = await standingsApi.create(data);\n      return response.data;\n    },\n    onSuccess: newStanding => {\n      var _newStanding$team, _newStanding$team2;\n      // Invalidate and refetch standings queries\n      queryClient.invalidateQueries({\n        queryKey: standingsQueryKeys.all\n      });\n\n      // Optimistically update team-specific queries\n      if (newStanding !== null && newStanding !== void 0 && (_newStanding$team = newStanding.team) !== null && _newStanding$team !== void 0 && _newStanding$team.id) {\n        queryClient.invalidateQueries({\n          queryKey: standingsQueryKeys.team(newStanding.team.id)\n        });\n      }\n\n      // Invalidate conference standings\n      if (newStanding !== null && newStanding !== void 0 && (_newStanding$team2 = newStanding.team) !== null && _newStanding$team2 !== void 0 && _newStanding$team2.conference && newStanding !== null && newStanding !== void 0 && newStanding.year) {\n        queryClient.invalidateQueries({\n          queryKey: standingsQueryKeys.conference(newStanding.team.conference, newStanding.year)\n        });\n      }\n    },\n    onError: error => {\n      console.error('Failed to create standing:', error);\n    }\n  });\n};\n\n/**\n * Hook for updating an existing standing\n */\n_s7(useCreateStanding, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useUpdateStanding = () => {\n  _s8();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      id,\n      data\n    }) => {\n      const response = await standingsApi.update(id, data);\n      return response.data;\n    },\n    onSuccess: (updatedStanding, {\n      id\n    }) => {\n      var _updatedStanding$team, _updatedStanding$team2;\n      // Update the specific standing in cache\n      queryClient.setQueryData(standingsQueryKeys.detail(id), updatedStanding);\n\n      // Invalidate related queries\n      queryClient.invalidateQueries({\n        queryKey: standingsQueryKeys.lists()\n      });\n      if (updatedStanding !== null && updatedStanding !== void 0 && (_updatedStanding$team = updatedStanding.team) !== null && _updatedStanding$team !== void 0 && _updatedStanding$team.id) {\n        queryClient.invalidateQueries({\n          queryKey: standingsQueryKeys.team(updatedStanding.team.id)\n        });\n      }\n      if (updatedStanding !== null && updatedStanding !== void 0 && (_updatedStanding$team2 = updatedStanding.team) !== null && _updatedStanding$team2 !== void 0 && _updatedStanding$team2.conference && updatedStanding !== null && updatedStanding !== void 0 && updatedStanding.year) {\n        queryClient.invalidateQueries({\n          queryKey: standingsQueryKeys.conference(updatedStanding.team.conference, updatedStanding.year)\n        });\n      }\n    },\n    onError: error => {\n      console.error('Failed to update standing:', error);\n    }\n  });\n};\n\n/**\n * Hook for deleting a standing\n */\n_s8(useUpdateStanding, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useDeleteStanding = () => {\n  _s9();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async id => {\n      await standingsApi.delete(id);\n      return id;\n    },\n    onSuccess: deletedId => {\n      // Remove from cache and invalidate queries\n      queryClient.removeQueries({\n        queryKey: standingsQueryKeys.detail(deletedId)\n      });\n      queryClient.invalidateQueries({\n        queryKey: standingsQueryKeys.all\n      });\n    },\n    onError: error => {\n      console.error('Failed to delete standing:', error);\n    }\n  });\n};\n\n/**\n * Hook for calculating standings for a year\n */\n_s9(useDeleteStanding, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useCalculateStandings = () => {\n  _s0();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async year => {\n      const response = await standingsApi.calculateStandings(year);\n      return response.data;\n    },\n    onSuccess: (_, year) => {\n      // Invalidate all standings queries for the calculated year\n      queryClient.invalidateQueries({\n        queryKey: standingsQueryKeys.all,\n        predicate: query => {\n          const key = query.queryKey;\n          return key.includes(year) || key.includes('list');\n        }\n      });\n    },\n    onError: error => {\n      console.error('Failed to calculate standings:', error);\n    }\n  });\n};\n\n/**\n * Hook for calculating conference standings\n */\n_s0(useCalculateStandings, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useCalculateConferenceStandings = () => {\n  _s1();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      conference,\n      year\n    }) => {\n      const response = await standingsApi.calculateConferenceStandings(conference, year);\n      return response.data;\n    },\n    onSuccess: (_, {\n      conference,\n      year\n    }) => {\n      // Invalidate specific conference standings\n      queryClient.invalidateQueries({\n        queryKey: standingsQueryKeys.conference(conference, year)\n      });\n\n      // Invalidate general standings queries that might include this conference\n      queryClient.invalidateQueries({\n        queryKey: standingsQueryKeys.lists()\n      });\n    },\n    onError: error => {\n      console.error('Failed to calculate conference standings:', error);\n    }\n  });\n};\n_s1(useCalculateConferenceStandings, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","standingsApi","standingsQueryKeys","all","lists","list","filters","detail","id","team","teamId","year","conference","ranked","limit","votes","useStandings","params","_s","queryKey","queryFn","response","getStandings","data","staleTime","gcTime","useStanding","_s2","getById","enabled","useTeamStanding","_s3","getTeamStanding","useConferenceStandings","_s4","getByConference","useRankedStandings","_s5","getRanked","useReceivingVotesStandings","_s6","getReceivingVotes","useCreateStanding","_s7","queryClient","mutationFn","create","onSuccess","newStanding","_newStanding$team","_newStanding$team2","invalidateQueries","onError","error","console","useUpdateStanding","_s8","update","updatedStanding","_updatedStanding$team","_updatedStanding$team2","setQueryData","useDeleteStanding","_s9","delete","deletedId","removeQueries","useCalculateStandings","_s0","calculateStandings","_","predicate","query","key","includes","useCalculateConferenceStandings","_s1","calculateConferenceStandings"],"sources":["/Users/brodycritchlow/Projects/footballdynasty-new/frontend/src/hooks/useStandings.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { standingsApi } from '../services/api';\nimport type { Standing, StandingCreateRequest, StandingUpdateRequest } from '../types';\n\n// Query Keys\nexport const standingsQueryKeys = {\n  all: ['standings'] as const,\n  lists: () => [...standingsQueryKeys.all, 'list'] as const,\n  list: (filters: { year?: number; conference?: string; page?: number; size?: number }) => \n    [...standingsQueryKeys.lists(), filters] as const,\n  detail: (id: string) => [...standingsQueryKeys.all, 'detail', id] as const,\n  team: (teamId: string, year?: number) => \n    [...standingsQueryKeys.all, 'team', teamId, ...(year ? [year] : [])] as const,\n  conference: (conference: string, year: number) => \n    [...standingsQueryKeys.all, 'conference', conference, year] as const,\n  ranked: (year: number, limit?: number) => \n    [...standingsQueryKeys.all, 'ranked', year, ...(limit ? [limit] : [])] as const,\n  votes: (year: number) => [...standingsQueryKeys.all, 'votes', year] as const,\n};\n\n// Query Hooks\n\n/**\n * Hook for fetching standings with filtering and pagination\n */\nexport const useStandings = (params?: { \n  year?: number; \n  conference?: string; \n  page?: number; \n  size?: number \n}) => {\n  return useQuery({\n    queryKey: standingsQueryKeys.list(params || {}),\n    queryFn: async () => {\n      const response = await standingsApi.getStandings(params);\n      return response.data;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  });\n};\n\n/**\n * Hook for fetching a specific standing by ID\n */\nexport const useStanding = (id: string) => {\n  return useQuery({\n    queryKey: standingsQueryKeys.detail(id),\n    queryFn: async () => {\n      const response = await standingsApi.getById(id);\n      return response.data;\n    },\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n  });\n};\n\n/**\n * Hook for fetching team-specific standings\n */\nexport const useTeamStanding = (teamId: string, year?: number) => {\n  return useQuery({\n    queryKey: standingsQueryKeys.team(teamId, year),\n    queryFn: async () => {\n      const response = await standingsApi.getTeamStanding(teamId, year);\n      return response.data;\n    },\n    enabled: !!teamId,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n  });\n};\n\n/**\n * Hook for fetching conference standings\n */\nexport const useConferenceStandings = (conference: string, year: number) => {\n  return useQuery({\n    queryKey: standingsQueryKeys.conference(conference, year),\n    queryFn: async () => {\n      const response = await standingsApi.getByConference(conference, year);\n      return response.data;\n    },\n    enabled: !!conference && !!year,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n  });\n};\n\n/**\n * Hook for fetching ranked teams\n */\nexport const useRankedStandings = (year: number, limit?: number) => {\n  return useQuery({\n    queryKey: standingsQueryKeys.ranked(year, limit),\n    queryFn: async () => {\n      const response = await standingsApi.getRanked(year, limit);\n      return response.data;\n    },\n    enabled: !!year,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n  });\n};\n\n/**\n * Hook for fetching teams receiving votes\n */\nexport const useReceivingVotesStandings = (year: number) => {\n  return useQuery({\n    queryKey: standingsQueryKeys.votes(year),\n    queryFn: async () => {\n      const response = await standingsApi.getReceivingVotes(year);\n      return response.data;\n    },\n    enabled: !!year,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n  });\n};\n\n// Mutation Hooks\n\n/**\n * Hook for creating a new standing\n */\nexport const useCreateStanding = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: StandingCreateRequest) => {\n      const response = await standingsApi.create(data);\n      return response.data;\n    },\n    onSuccess: (newStanding) => {\n      // Invalidate and refetch standings queries\n      queryClient.invalidateQueries({ queryKey: standingsQueryKeys.all });\n      \n      // Optimistically update team-specific queries\n      if (newStanding?.team?.id) {\n        queryClient.invalidateQueries({ \n          queryKey: standingsQueryKeys.team(newStanding.team.id) \n        });\n      }\n      \n      // Invalidate conference standings\n      if (newStanding?.team?.conference && newStanding?.year) {\n        queryClient.invalidateQueries({ \n          queryKey: standingsQueryKeys.conference(newStanding.team.conference, newStanding.year) \n        });\n      }\n    },\n    onError: (error) => {\n      console.error('Failed to create standing:', error);\n    },\n  });\n};\n\n/**\n * Hook for updating an existing standing\n */\nexport const useUpdateStanding = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: StandingUpdateRequest }) => {\n      const response = await standingsApi.update(id, data);\n      return response.data;\n    },\n    onSuccess: (updatedStanding, { id }) => {\n      // Update the specific standing in cache\n      queryClient.setQueryData(standingsQueryKeys.detail(id), updatedStanding);\n      \n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: standingsQueryKeys.lists() });\n      \n      if (updatedStanding?.team?.id) {\n        queryClient.invalidateQueries({ \n          queryKey: standingsQueryKeys.team(updatedStanding.team.id) \n        });\n      }\n      \n      if (updatedStanding?.team?.conference && updatedStanding?.year) {\n        queryClient.invalidateQueries({ \n          queryKey: standingsQueryKeys.conference(updatedStanding.team.conference, updatedStanding.year) \n        });\n      }\n    },\n    onError: (error) => {\n      console.error('Failed to update standing:', error);\n    },\n  });\n};\n\n/**\n * Hook for deleting a standing\n */\nexport const useDeleteStanding = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      await standingsApi.delete(id);\n      return id;\n    },\n    onSuccess: (deletedId) => {\n      // Remove from cache and invalidate queries\n      queryClient.removeQueries({ queryKey: standingsQueryKeys.detail(deletedId) });\n      queryClient.invalidateQueries({ queryKey: standingsQueryKeys.all });\n    },\n    onError: (error) => {\n      console.error('Failed to delete standing:', error);\n    },\n  });\n};\n\n/**\n * Hook for calculating standings for a year\n */\nexport const useCalculateStandings = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (year: number) => {\n      const response = await standingsApi.calculateStandings(year);\n      return response.data;\n    },\n    onSuccess: (_, year) => {\n      // Invalidate all standings queries for the calculated year\n      queryClient.invalidateQueries({ \n        queryKey: standingsQueryKeys.all,\n        predicate: (query) => {\n          const key = query.queryKey;\n          return key.includes(year) || key.includes('list');\n        }\n      });\n    },\n    onError: (error) => {\n      console.error('Failed to calculate standings:', error);\n    },\n  });\n};\n\n/**\n * Hook for calculating conference standings\n */\nexport const useCalculateConferenceStandings = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ conference, year }: { conference: string; year: number }) => {\n      const response = await standingsApi.calculateConferenceStandings(conference, year);\n      return response.data;\n    },\n    onSuccess: (_, { conference, year }) => {\n      // Invalidate specific conference standings\n      queryClient.invalidateQueries({ \n        queryKey: standingsQueryKeys.conference(conference, year) \n      });\n      \n      // Invalidate general standings queries that might include this conference\n      queryClient.invalidateQueries({ \n        queryKey: standingsQueryKeys.lists() \n      });\n    },\n    onError: (error) => {\n      console.error('Failed to calculate conference standings:', error);\n    },\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
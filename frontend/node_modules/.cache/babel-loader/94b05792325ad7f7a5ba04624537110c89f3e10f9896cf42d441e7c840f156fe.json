{"ast":null,"code":"import _objectSpread from\"/Users/brodycritchlow/Projects/footballdynasty-new/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{authApi}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[selectedTeam,setSelectedTeam]=useState(null);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{// Check for stored auth token on app start\nconst token=localStorage.getItem('auth_token');const storedUser=localStorage.getItem('user');const storedTeam=localStorage.getItem('selected_team');if(token&&storedUser){try{const userData=JSON.parse(storedUser);setUser(userData);if(storedTeam){const teamData=JSON.parse(storedTeam);setSelectedTeam(teamData);}}catch(error){console.error('Error parsing stored auth data:',error);localStorage.removeItem('auth_token');localStorage.removeItem('user');localStorage.removeItem('selected_team');}}setIsLoading(false);},[]);const login=async(username,password)=>{try{setIsLoading(true);const response=await authApi.login({username,password});const{user:userData,token,selectedTeam:userTeam}=response.data;// Store auth data\nlocalStorage.setItem('auth_token',token);localStorage.setItem('user',JSON.stringify(userData));setUser(userData);if(userTeam){localStorage.setItem('selected_team',JSON.stringify(userTeam));setSelectedTeam(userTeam);}}catch(error){console.error('Login failed:',error);throw error;}finally{setIsLoading(false);}};const register=async(username,password,email)=>{try{setIsLoading(true);const response=await authApi.register({username,password,email});const{user:userData,token,selectedTeam:userTeam}=response.data;// Store auth data\nlocalStorage.setItem('auth_token',token);localStorage.setItem('user',JSON.stringify(userData));setUser(userData);if(userTeam){localStorage.setItem('selected_team',JSON.stringify(userTeam));setSelectedTeam(userTeam);}}catch(error){console.error('Registration failed:',error);throw error;}finally{setIsLoading(false);}};const logout=()=>{localStorage.removeItem('auth_token');localStorage.removeItem('user');localStorage.removeItem('selected_team');setUser(null);setSelectedTeam(null);};const selectTeam=team=>{localStorage.setItem('selected_team',JSON.stringify(team));setSelectedTeam(team);// Update user with selected team ID\nif(user){const updatedUser=_objectSpread(_objectSpread({},user),{},{selectedTeamId:team.id});localStorage.setItem('user',JSON.stringify(updatedUser));setUser(updatedUser);}};const value={user,selectedTeam,isAuthenticated:!!user,isLoading,login,register,logout,selectTeam};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import{useState,useEffect}from'react';/**\n * Custom hook that debounces a value by delaying its update until after a specified delay\n * @param value - The value to debounce\n * @param delay - The delay in milliseconds\n * @returns The debounced value\n */export function useDebounce(value,delay){const[debouncedValue,setDebouncedValue]=useState(value);useEffect(()=>{// Set up a timer to update the debounced value after the delay\nconst timer=setTimeout(()=>{setDebouncedValue(value);},delay);// Clean up the timer if the value changes before the delay is complete\nreturn()=>{clearTimeout(timer);};},[value,delay]);return debouncedValue;}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}